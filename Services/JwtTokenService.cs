using System.IdentityModel.Tokens.Jwt;
using System.Security.Claims;
using System.Text;
using Microsoft.Extensions.Options;
using Microsoft.IdentityModel.Tokens;

public interface IJwtTokenService
{
    string GenerateToken(UserCredentials userData);
}

public class JwtTokenService : IJwtTokenService
{

    private IOptions<AuthOptions> _authOptions;

    public JwtTokenService(IOptions<AuthOptions> authOptions)
    {
        _authOptions = authOptions;
    }

    public string GenerateToken(UserCredentials userData)
    {
        var issuer = _authOptions.Value.Issuer;
        var audience = _authOptions.Value.Audience;
        var keyString = _authOptions.Value.Key;

        var securityKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(keyString));
        var credentials = new SigningCredentials(securityKey, SecurityAlgorithms.HmacSha256);

        // Now its ime to define the jwt token which will be responsible of creating our tokens
        var jwtTokenHandler = new JwtSecurityTokenHandler();

        // We get our secret from the appsettings
        var key = Encoding.ASCII.GetBytes(keyString);

        // we define our token descriptor
        // We need to utilise claims which are properties in our token which gives information about the token
        // which belong to the specific user who it belongs to
        // so it could contain their id, name, email the good part is that these information
        // are generated by our server and identity framework which is valid and trusted
        var tokenDescriptor = new SecurityTokenDescriptor
        {
            Subject = new ClaimsIdentity(new[]{
                        new Claim("Id", userData.Id.ToString()),
                        new Claim(JwtRegisteredClaimNames.Email, userData.Email),
                        // the JTI is used for our refresh token which we will be convering in the next video
                        new Claim(JwtRegisteredClaimNames.Jti, Guid.NewGuid().ToString()),
                    
                    //user role
                        new Claim(ClaimTypes.Role, userData.Role)
                     }),
            // the life span of the token needs to be shorter and utilise refresh token to keep the user signedin
            // but since this is a demo app we can extend it to fit our current need
            Expires = DateTime.UtcNow.AddHours(5),
            Audience = audience,
            Issuer = issuer,
            // here we are adding the encryption alogorithim information which will be used to decrypt our token
            SigningCredentials = new SigningCredentials(new SymmetricSecurityKey(key), SecurityAlgorithms.HmacSha512Signature)
        };

        var token = jwtTokenHandler.CreateToken(tokenDescriptor);

        var jwtToken = jwtTokenHandler.WriteToken(token);
        return jwtToken;
    }
}